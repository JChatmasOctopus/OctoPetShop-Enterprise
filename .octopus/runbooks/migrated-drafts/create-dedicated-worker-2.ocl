name = "Create dedicated worker"
default_guided_failure_mode = "EnvironmentDefault"
description = "Creates a dedicated worker deployed in the K8s cluster."

connectivity_policy {
    allow_deployments_to_no_targets = true
}

run_retention_policy {
    quantity_to_keep = 3
}

process {
    step "deploy-worker-containers" {
        name = "Deploy worker containers"
        properties = {
            Octopus.Action.TargetRoles = "Enterprise-Demo"
        }

        action {
            action_type = "Octopus.KubernetesDeployContainers"
            properties = {
                Octopus.Action.EnabledFeatures = ",Octopus.Features.KubernetesService,Octopus.Features.KubernetesIngress,Octopus.Features.KubernetesConfigMap,Octopus.Features.KubernetesSecret"
                Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
                Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
                Octopus.Action.KubernetesContainers.Containers = "[{\"Name\":\"tentacle-worker\",\"Ports\":[],\"EnvironmentVariables\":[{\"key\":\"ServerApiKey\",\"keyError\":null,\"value\":\"#{OctoPetShop.Api.Key}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"ServerUrl\",\"keyError\":null,\"value\":\"#{Global.Octopus.ServerUrl}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"ACCEPT_EULA\",\"keyError\":null,\"value\":\"Y\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"TargetWorkerPool\",\"keyError\":null,\"value\":\"K8s Worker\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"ServerPort\",\"keyError\":null,\"value\":\"10943\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null},{\"key\":\"Space\",\"keyError\":null,\"value\":\"#{Octopus.Space.Name}\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null}],\"SecretEnvironmentVariables\":[],\"ConfigMapEnvironmentVariables\":[],\"FieldRefEnvironmentVariables\":[],\"ConfigMapEnvFromSource\":[],\"SecretEnvFromSource\":[],\"VolumeMounts\":[],\"Resources\":{\"requests\":{\"memory\":\"\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"amdGpu\":\"\",\"nvidiaGpu\":\"\",\"storage\":\"\"},\"limits\":{\"memory\":\"\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"amdGpu\":\"\",\"nvidiaGpu\":\"\",\"storage\":\"\"}},\"LivenessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":\"\",\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"ReadinessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":\"\",\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"StartupProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":\"\",\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"Command\":[],\"Args\":[],\"SecurityContext\":{\"allowPrivilegeEscalation\":\"\",\"privileged\":\"True\",\"readOnlyRootFilesystem\":\"\",\"runAsGroup\":\"\",\"runAsNonRoot\":\"\",\"runAsUser\":\"\",\"capabilities\":{\"add\":[],\"drop\":[]},\"seLinuxOptions\":{\"level\":\"\",\"role\":\"\",\"type\":\"\",\"user\":\"\"}},\"TerminationMessagePath\":\"\",\"TerminationMessagePolicy\":\"\",\"Lifecycle\":{\"PreStop\":null,\"PostStart\":null},\"CreateFeedSecrets\":\"True\"}]"
                Octopus.Action.KubernetesContainers.DeploymentName = "workers-deployment"
                Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
                Octopus.Action.KubernetesContainers.DeploymentStyle = "RollingUpdate"
                Octopus.Action.KubernetesContainers.DeploymentWait = "Wait"
                Octopus.Action.KubernetesContainers.IngressAnnotations = "[]"
                Octopus.Action.KubernetesContainers.MaxSurge = "0"
                Octopus.Action.KubernetesContainers.MaxUnavailable = "1"
                Octopus.Action.KubernetesContainers.Namespace = "worker"
                Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
                Octopus.Action.KubernetesContainers.Replicas = "1"
                Octopus.Action.KubernetesContainers.ServiceNameType = "External"
                Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
                OctopusUseBundledTooling = "False"
            }
            worker_pool = "hosted-ubuntu"

            container {
                feed = "docker-hub"
                image = "octopusdeploy/worker-tools:ubuntu.18.04"
            }

            packages "tentacle-worker" {
                acquisition_location = "NotAcquired"
                feed = "docker-hub"
                package_id = "octopusdeploy/tentacle"
                properties = {
                    Extract = "False"
                    PackageParameterName = ""
                    SelectionMode = "immediate"
                }
            }
        }
    }

    step "wait-for-worker-to-register" {
        name = "Wait for worker to register"

        action {
            action_type = "Octopus.Script"
            properties = {
                Octopus.Action.Script.ScriptBody = <<-EOT
                    # Define parameters 
                    $baseUrl = $OctopusParameters['Global.Octopus.ServerUrl'] 
                    $apiKey = $OctopusParameters['OctoPetShop.Api.Key']
                    $header = @{ "X-Octopus-ApiKey" = $apiKey }
                    $spaceId = $OctopusParameters['Octopus.Space.Id']
                    $spaceName = $OctopusParameters['Octopus.Space.Name']
                    $workerPoolName = "K8s Worker"
                    
                    if ($baseUrl.EndsWith("/"))
                    {
                    	$baseUrl = $baseUrl.SubString(0, $baseUrl.LastIndexOf("/"))
                    }
                    
                      # Get worker pool
                      Write-Host "Getting reference to $workerPoolName in space $spaceName ..."
                      Write-host "$baseUrl/api/$($spaceId)/workerpools/all"
                      Write-host "$($workerPoolName)"
                      $workerPool = ((Invoke-RestMethod -Method Get -Uri "$baseUrl/api/$($spaceId)/workerpools/all" -Headers @{"X-Octopus-ApiKey"="$apiKey"}) | Where-Object {$_.Name -eq $workerPoolName})
                    
                      # Check worker pool
                      if ($null -ne $workerPool)
                      {
                        # Get all workers
                        Write-Host "Checking to see if workers have registered themselves ..."
                        $workers = (Invoke-RestMethod -Method Get -Uri "$baseUrl/api/$($spaceId)/workerpools/$($workerPool.Id)/workers" -Headers @{"X-Octopus-ApiKey"="$apiKey"})
                    
                        $retries = 20
                    
                        $numberOfWorkers = 1
                        
                        while ($workers.Items.Count -ne $numberOfWorkers)
                        {
                          if ($retries -gt 0)
                          {
                              Write-Host "Waiting 60 seconds for $numberOfWorkers workers to register themselves, $retries tries remaining ..."
                              Start-Sleep -Seconds 60
                              $retries--
                              $workers = (Invoke-RestMethod -Method Get -Uri "$baseUrl/api/$($spaceId)/workerpools/$($workerPool.Id)/workers" -Headers @{"X-Octopus-ApiKey"="$apiKey"})
                          }
                          else
                          {
                              Write-Error "Workers didn't show up in time!"
                          }
                          
                          if ($workers.Items.Count -gt $numberOfWorkers)
                          {
                          	Write-Warning "Number of workers is greater than expected, check Infrastructure tab, a worker creation may have died."
                            break
                          }
                        }
                        
                        # There should only be one worker
                        Set-OctopusVariable -name "WorkerName" -value $workers.Items[0].Name
                      }
                    
                    EOT
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "PowerShell"
            }
            worker_pool = "hosted-ubuntu"
        }
    }

    step "worker-health-check" {
        name = "Worker - Health check"

        action {
            properties = {
                Octopus.Action.Template.Id = "ActionTemplates-1124"
                Octopus.Action.Template.Version = "3"
                WorkerApiKey = "#{OctoPetShop.Api.Key}"
                WorkerName = "#{Octopus.Action[Wait for worker to register].Output.WorkerName}"
                WorkerPoolName = "K8s Worker"
            }
            worker_pool = "hosted-windows"
        }
    }

    step "install-required-components" {
        name = "Install required components"

        action {
            action_type = "Octopus.Script"
            properties = {
                Octopus.Action.Script.ScriptBody = <<-EOT
                    # pull docker image
                    docker pull octopusdeploy/worker-tools:ubuntu.18.04
                    
                    # install kubectl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                    
                    # Install az cli
                    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    EOT
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "Bash"
            }
            worker_pool = "k8s-worker"
        }
    }
}